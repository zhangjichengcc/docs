name: deploy docs to aliyun by docker

# 触发方式
on:
  push:
    branches:
      - main

# 任务
jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      REMOTE_HOST: 118.190.52.53
      REMOTE_USER: root
      IMAGE_NAME: my-docs-image # Docker 镜像名称
      CONTAINER_NAME: my-docs-container # Docker 容器名称
      TARGET_PATH: /opt/docker-container
      TARGET_DIR: docs

    steps:
      # 切换分支并获取代码
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          ref: main # 确保拉取的是 main 分支

      # 上传源代码
      - name: Upload source code to remote server
        uses: appleboy/scp-action@v0.1.0
        with:
          host: ${{ env.REMOTE_HOST }}
          username: ${{ env.REMOTE_USER }}
          key: ${{ secrets.AL_ACCESS_TOKEN }}
          source: '.'
          target: ${{ env.TARGET_PATH }}/${{ env.TARGET_DIR }}

      # 链接服务器，备份镜像、删除旧容器，打包新镜像，创建新容器
      - name: Connect to Server, Backup Old Image, Delete Old Container, Build and Run New Image
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ env.REMOTE_HOST }}
          username: ${{ env.REMOTE_USER }}
          key: ${{ secrets.AL_ACCESS_TOKEN }}
          script: |
            set -e  # 如果任意命令失败，则脚本停止运行
            set -o pipefail  # 确保管道中任何一个命令失败会被捕获

            # 定义备份镜像的命名规则
            BACKUP_PREFIX="${{ env.IMAGE_NAME }}_backup_"

            # 进入目标路径
            echo "进入目标路径: ${{ env.TARGET_PATH }}/${{ env.TARGET_DIR }}"
            cd ${{ env.TARGET_PATH }}/${{ env.TARGET_DIR }}

            # 清理旧的备份镜像
            echo "清理旧的备份镜像..."
            OLD_BACKUPS=$(docker images --filter "reference=${BACKUP_PREFIX}*" --format "{{.Repository}}:{{.Tag}}")
            if [ -n "$OLD_BACKUPS" ]; then
              echo "找到旧的备份镜像: $OLD_BACKUPS"
              echo "$OLD_BACKUPS" | xargs -r docker rmi || true
            else
              echo "没有找到旧的备份镜像"
            fi

            # 备份当前镜像
            echo "尝试备份当前镜像: ${IMAGE_NAME}..."
            CONTAINER_ID=$(docker ps -q --filter "name=${{ env.CONTAINER_NAME }}")
            if [ -n "$CONTAINER_ID" ]; then
              TIMESTAMP=$(date "+%Y%m%d_%H%M%S")
              BACKUP_IMAGE="${{ env.IMAGE_NAME }}_backup_$TIMESTAMP"
              docker commit "$CONTAINER_ID" "$BACKUP_IMAGE"
              echo "镜像已成功备份为: $BACKUP_IMAGE"
            else
              echo "没有找到正在运行的容器: ${{ env.CONTAINER_NAME }}，跳过备份步骤"
            fi

            # 停止并删除旧容器
            echo "停止并删除旧容器: ${CONTAINER_NAME}..."
            docker stop ${{ env.CONTAINER_NAME }} 2>/dev/null || echo "容器未运行，跳过停止"
            docker rm ${{ env.CONTAINER_NAME }} 2>/dev/null || echo "容器不存在，跳过删除"

            # 删除旧镜像（如果存在）
            echo "尝试删除旧镜像: ${IMAGE_NAME}..."
            docker rmi ${{ env.IMAGE_NAME }} 2>/dev/null || echo "镜像不存在，跳过删除"

            # 构建新的 Docker 镜像
            echo "开始构建新镜像: ${IMAGE_NAME}..."
            docker build -t ${{ env.IMAGE_NAME }} .

            # 创建并启动新容器
            echo "启动新容器: ${CONTAINER_NAME}..."
            docker run -d --name ${{ env.CONTAINER_NAME }} -p 8101:80 ${{ env.IMAGE_NAME }}

            # 检查容器状态
            echo "当前运行的容器:"
            docker ps
